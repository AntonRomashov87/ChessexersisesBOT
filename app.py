import os
import logging
import asyncio
import aiohttp
import random
import json
from datetime import datetime

from telegram import Bot, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import nest_asyncio

# ===== –õ–æ–≥—É–≤–∞–Ω–Ω—è =====
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ===== –¢–æ–∫–µ–Ω —ñ Chat ID =====
BOT_TOKEN = "8092371216:AAF7bfwunLqI2ZrGBpE2goMaxXnol07vG0g"
CHAT_ID = "598331739"

# ===== URL JSON –∑ –∑–∞–¥–∞—á–∞–º–∏ =====
PUZZLES_URL = "https://raw.githubusercontent.com/AntonRomashov87/Chess_puzzles/main/puzzles.json"

# ===== –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á =====
PUZZLES = []

# ===== –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–¥–∞—á =====
async def load_puzzles():
    global PUZZLES
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(PUZZLES_URL) as resp:
                resp.raise_for_status()
                text = await resp.text()
                data = json.loads(text)
                if isinstance(data, list):
                    PUZZLES = data
                    logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(PUZZLES)} –∑–∞–¥–∞—á")
                else:
                    logger.error("JSON –º–∞—î –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ puzzles.json: {e}")
        PUZZLES = []

# ===== –û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤—É –∑–∞–¥–∞—á—É =====
def get_random_puzzle():
    if not PUZZLES:
        return "‚ö†Ô∏è –ó–∞–¥–∞—á—ñ —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ."
    puzzle = random.choice(PUZZLES)
    return f"‚ôüÔ∏è {puzzle.get('title', '–ó–∞–¥–∞—á–∞')}:\n{puzzle.get('url', '')}"

# ===== –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ =====
def get_keyboard():
    keyboard = [
        [InlineKeyboardButton("‚ôüÔ∏è Puzzle", callback_data="puzzle")],
        [InlineKeyboardButton("‚ÑπÔ∏è Start", callback_data="start")]
    ]
    return InlineKeyboardMarkup(keyboard)

# ===== –ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ =====
async def start(update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø —à–∞—Ö–æ–≤–∏–π –±–æ—Ç ü§ñ‚ôü\n"
        "–ù–∞—Ç–∏—Å–∫–∞–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ:",
        reply_markup=get_keyboard()
    )

# ===== –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ =====
async def button_handler(update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "puzzle":
        msg = get_random_puzzle()
        await query.edit_message_text(
            text=msg,
            reply_markup=get_keyboard()
        )
    elif query.data == "start":
        await query.edit_message_text(
            text="–ü—Ä–∏–≤—ñ—Ç! –Ø –≥–æ—Ç–æ–≤–∏–π –¥–∞—Ç–∏ —Ç–æ–±—ñ –∑–∞–¥–∞—á—É ‚ôüÔ∏è",
            reply_markup=get_keyboard()
        )

# ===== –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ =====
async def scheduled_puzzles(bot: Bot):
    while True:
        now = datetime.now()
        if now.hour in [8, 20] and now.minute == 0:
            msg = get_random_puzzle()
            await bot.send_message(chat_id=CHAT_ID, text=msg)
            await asyncio.sleep(61)
        await asyncio.sleep(20)

# ===== –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è =====
async def main():
    await load_puzzles()
    app = Application.builder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥–∏
    app.add_handler(CommandHandler("start", start))

    # –ö–Ω–æ–ø–∫–∏
    app.add_handler(CallbackQueryHandler(button_handler))

    # –ê–≤—Ç–æ-—Ä–æ–∑—Å–∏–ª–∫–∞
    asyncio.create_task(scheduled_puzzles(app.bot))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π ‚úÖ")
    await app.run_polling()

# ===== –ó–∞–ø—É—Å–∫ =====
if __name__ == "__main__":
    nest_asyncio.apply()
    asyncio.get_event_loop().run_until_complete(main())
