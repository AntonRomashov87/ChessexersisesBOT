import os
import logging
import asyncio
import aiohttp
import random
import json

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from flask import Flask, request

# ===== –õ–æ–≥—É–≤–∞–Ω–Ω—è =====
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ===== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Flask =====
app = Flask(__name__)

# ===== –¢–æ–∫–µ–Ω —ñ Chat ID =====
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

# ===== URL JSON –∑ –∑–∞–¥–∞—á–∞–º–∏ =====
PUZZLES_URL = "[https://raw.githubusercontent.com/AntonRomashov87/Chess_puzzles/main/puzzles.json](https://raw.githubusercontent.com/AntonRomashov87/Chess_puzzles/main/puzzles.json)"

# ===== –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ =====
PUZZLES = []
PTB_APP = None

# ===== –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–¥–∞—á =====
async def load_puzzles():
    global PUZZLES
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(PUZZLES_URL) as resp:
                resp.raise_for_status()
                text = await resp.text()
                data = json.loads(text)
                if isinstance(data, list):
                    PUZZLES = data
                    logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(PUZZLES)} –∑–∞–¥–∞—á")
                else:
                    logger.error("JSON –º–∞—î –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ puzzles.json: {e}")
        PUZZLES = []

# ===== –û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤—É –∑–∞–¥–∞—á—É =====
def get_random_puzzle():
    if not PUZZLES:
        return "‚ö†Ô∏è –ó–∞–¥–∞—á—ñ —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –∞–±–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞."
    puzzle = random.choice(PUZZLES)
    return f"‚ôüÔ∏è {puzzle.get('title', '–ó–∞–¥–∞—á–∞')}:\n{puzzle.get('url', '')}"

# ===== –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ =====
def get_keyboard():
    keyboard = [
        [InlineKeyboardButton("‚ôüÔ∏è Puzzle", callback_data="puzzle")],
        [InlineKeyboardButton("‚ÑπÔ∏è Start", callback_data="start")]
    ]
    return InlineKeyboardMarkup(keyboard)

# ===== –ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ =====
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø —à–∞—Ö–æ–≤–∏–π –±–æ—Ç ü§ñ‚ôü\n"
        "–ù–∞—Ç–∏—Å–∫–∞–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ:",
        reply_markup=get_keyboard()
    )

# ===== –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ =====
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "puzzle":
        msg = get_random_puzzle()
        await query.edit_message_text(text=msg, reply_markup=get_keyboard())
    elif query.data == "start":
        await query.edit_message_text(
            text="–ü—Ä–∏–≤—ñ—Ç! –Ø –≥–æ—Ç–æ–≤–∏–π –¥–∞—Ç–∏ —Ç–æ–±—ñ –∑–∞–¥–∞—á—É ‚ôüÔ∏è",
            reply_markup=get_keyboard()
        )

# =======================
# Webhook
# =======================
@app.route("/webhook", methods=["POST"])
async def webhook():
    if PTB_APP:
        update_data = request.get_json()
        update = Update.de_json(update_data, PTB_APP.bot)
        await PTB_APP.process_update(update)
        return '', 200
    return 'Bot not initialized', 500

@app.route("/", methods=["GET"])
def index():
    return "–®–∞—Ö–æ–≤–∏–π –±–æ—Ç –ø—Ä–∞—Ü—é—î —á–µ—Ä–µ–∑ Webhook!", 200

# =======================
# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É
# =======================
async def setup_bot():
    global PTB_APP
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!")
        return

    await load_puzzles()
    
    PTB_APP = Application.builder().token(BOT_TOKEN).build()
    
    PTB_APP.add_handler(CommandHandler("start", start_command))
    PTB_APP.add_handler(CallbackQueryHandler(button_handler))

    webhook_url = os.getenv("RAILWAY_STATIC_URL") or os.getenv("RENDER_EXTERNAL_URL")
    if webhook_url:
        full_webhook_url = f"https://{webhook_url}/webhook"
        await PTB_APP.bot.set_webhook(full_webhook_url)
        logger.info(f"–í–µ–±—Ö—É–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {full_webhook_url}")
    else:
        logger.warning("URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è.")

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    if loop.is_running():
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –≤ —ñ—Å–Ω—É—é—á–æ–º—É —Ü–∏–∫–ª—ñ
        loop.create_task(setup_bot())
    else:
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ü–∏–∫–ª, —è–∫—â–æ –≤—ñ–Ω —â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π
        loop.run_until_complete(setup_bot())

    port = int(os.getenv("PORT", 5000))
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ async-—Å—É–º—ñ—Å–Ω–∏–π —Å–µ—Ä–≤–µ—Ä –∑–∞–º—ñ—Å—Ç—å app.run, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, hypercorn
    # –ê–ª–µ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏, –∑–∞–ª–∏—à–∏–º–æ app.run, —Ö–æ—á–∞ —Ü–µ –Ω–µ —ñ–¥–µ–∞–ª—å–Ω–æ –¥–ª—è async-–∫–æ–¥—É.
    # –î–ª—è Render/Railway —Ü–µ –∑–∞–∑–≤–∏—á–∞–π –ø—Ä–∞—Ü—é—î –∑–∞–≤–¥—è–∫–∏ gunicorn.
    app.run(host="0.0.0.0", port=port)
```

### –ö—Ä–æ–∫ 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—à–∏—Ö —Ñ–∞–π–ª—ñ–≤ (–Ω–µ –∑–º—ñ–Ω—é–π —ó—Ö, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–≤—ñ—Ä)

1.  **–§–∞–π–ª `requirements.txt`** –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏:
    ```
    python-telegram-bot[ext]
    Flask
    gunicorn
    aiohttp
    ```

2.  **–§–∞–π–ª `Procfile`** –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏:
    ```
    web: gunicorn main:app
    

