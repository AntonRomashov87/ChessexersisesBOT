import os
import logging
import asyncio
import aiohttp
import random
import json
from datetime import datetime

from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from flask import Flask, request

# ===== –õ–æ–≥—É–≤–∞–Ω–Ω—è =====
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ===== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Flask =====
app = Flask(__name__)

# ===== –¢–æ–∫–µ–Ω —ñ Chat ID =====
# –û—Ç—Ä–∏–º—É—î–º–æ –∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞, —è–∫ —É –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É –±–æ—Ç—ñ
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID") # –¢–∞–∫–æ–∂ –∫—Ä–∞—â–µ –≤–∏–Ω–µ—Å—Ç–∏ –≤ –∑–º—ñ–Ω–Ω—ñ

# ===== URL JSON –∑ –∑–∞–¥–∞—á–∞–º–∏ =====
PUZZLES_URL = "https://raw.githubusercontent.com/AntonRomashov87/Chess_puzzles/main/puzzles.json"

# ===== –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á =====
PUZZLES = []
# ===== –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç –±–æ—Ç–∞ =====
PTB_APP = None

# ===== –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–¥–∞—á =====
async def load_puzzles():
    global PUZZLES
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(PUZZLES_URL) as resp:
                resp.raise_for_status()
                text = await resp.text()
                data = json.loads(text)
                if isinstance(data, list):
                    PUZZLES = data
                    logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(PUZZLES)} –∑–∞–¥–∞—á")
                else:
                    logger.error("JSON –º–∞—î –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ puzzles.json: {e}")
        PUZZLES = []

# ===== –û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤—É –∑–∞–¥–∞—á—É =====
def get_random_puzzle():
    if not PUZZLES:
        return "‚ö†Ô∏è –ó–∞–¥–∞—á—ñ —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –∞–±–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ."
    puzzle = random.choice(PUZZLES)
    return f"‚ôüÔ∏è {puzzle.get('title', '–ó–∞–¥–∞—á–∞')}:\n{puzzle.get('url', '')}"

# ===== –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ (–∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω) =====
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
def get_keyboard():
    keyboard = [
        [InlineKeyboardButton("‚ôüÔ∏è Puzzle", callback_data="puzzle")],
        [InlineKeyboardButton("‚ÑπÔ∏è Start", callback_data="start")]
    ]
    return InlineKeyboardMarkup(keyboard)

# ===== –ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ (–∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω) =====
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø —à–∞—Ö–æ–≤–∏–π –±–æ—Ç ü§ñ‚ôü\n"
        "–ù–∞—Ç–∏—Å–∫–∞–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ:",
        reply_markup=get_keyboard()
    )

# ===== –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ (–∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω) =====
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "puzzle":
        msg = get_random_puzzle()
        await query.edit_message_text(text=msg, reply_markup=get_keyboard())
    elif query.data == "start":
        await query.edit_message_text(
            text="–ü—Ä–∏–≤—ñ—Ç! –Ø –≥–æ—Ç–æ–≤–∏–π –¥–∞—Ç–∏ —Ç–æ–±—ñ –∑–∞–¥–∞—á—É ‚ôüÔ∏è",
            reply_markup=get_keyboard()
        )

# ===== –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ =====
async def scheduled_puzzles():
    # –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –≤ –ø–æ—Ç–æ—á–Ω—ñ–π –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä—ñ –Ω–µ –±—É–¥–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –Ω–∞–¥—ñ–π–Ω–æ.
    # –î–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –ø–æ—Ç—Ä—ñ–±–µ–Ω –æ–∫—Ä–µ–º–∏–π "worker" –ø—Ä–æ—Ü–µ—Å, –∞ –Ω–µ "web".
    # –ü–æ–∫–∏ —â–æ –º–∏ —ó—ó –≤–∏–º–∫–Ω–µ–º–æ, —â–æ–± –±–æ—Ç —Å—Ç–∞–±—ñ–ª—å–Ω–æ –ø—Ä–∞—Ü—é–≤–∞–≤.
    logger.info("–§—É–Ω–∫—Ü—ñ—è —Ä–æ–∑—Å–∏–ª–∫–∏ –∑–∞ —Ä–æ–∑–∫–ª–∞–¥–æ–º –ø–æ–∫–∏ —â–æ –≤–∏–º–∫–Ω–µ–Ω–∞.")
    pass

# =======================
# Webhook
# =======================
@app.route("/webhook", methods=["POST"])
async def webhook():
    if PTB_APP:
        update_data = request.get_json()
        update = Update.de_json(update_data, PTB_APP.bot)
        await PTB_APP.process_update(update)
        return '', 200
    return 'Bot not initialized', 500

@app.route("/", methods=["GET"])
def index():
    return "–®–∞—Ö–æ–≤–∏–π –±–æ—Ç –ø—Ä–∞—Ü—é—î —á–µ—Ä–µ–∑ Webhook!", 200

# =======================
# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É
# =======================
async def setup_bot():
    global PTB_APP
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!")
        return

    await load_puzzles()
    
    PTB_APP = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    PTB_APP.add_handler(CommandHandler("start", start_command))
    PTB_APP.add_handler(CallbackQueryHandler(button_handler))

    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –≤–µ–±—Ö—É–∫
    webhook_url = os.getenv("RAILWAY_STATIC_URL") or os.getenv("RENDER_EXTERNAL_URL")
    if webhook_url:
        full_webhook_url = f"https://{webhook_url}/webhook"
        await PTB_APP.bot.set_webhook(full_webhook_url)
        logger.info(f"–í–µ–±—Ö—É–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {full_webhook_url}")
    else:
        logger.warning("URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è.")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    loop = asyncio.get_event_loop()
    loop.run_until_complete(setup_bot())

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask —Å–µ—Ä–≤–µ—Ä
    port = int(os.getenv("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
```

### –ö—Ä–æ–∫ 2: –û–Ω–æ–≤—ñ—Ç—å —Ñ–∞–π–ª–∏ –ø—Ä–æ—î–∫—Ç—É

1.  **`requirements.txt`**:
    –û–Ω–æ–≤—ñ—Ç—å —Ü–µ–π —Ñ–∞–π–ª. –ù–∞–º —Ç–µ–ø–µ—Ä –ø–æ—Ç—Ä—ñ–±–µ–Ω —ñ `Flask`, —ñ `python-telegram-bot`.
    ```
    python-telegram-bot[ext]
    Flask
    gunicorn
    aiohttp
    nest_asyncio
    ```
2.  **`Procfile`**:
    –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ü–µ–π —Ñ–∞–π–ª –º—ñ—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø—É—Å–∫—É –≤–µ–±—Å–µ—Ä–≤–µ—Ä–∞:
    ```
    web: gunicorn main:app
    

