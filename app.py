import os
import logging
import asyncio
import aiohttp
import random
import json
import re

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from flask import Flask, request

# ===== –õ–æ–≥—É–≤–∞–Ω–Ω—è =====
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ===== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Flask =====
app = Flask(__name__)

# ===== –¢–æ–∫–µ–Ω —ñ Chat ID =====
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

# ===== URL JSON –∑ –∑–∞–¥–∞—á–∞–º–∏ =====
PUZZLES_URL = "https://raw.githubusercontent.com/AntonRomashov87/Chess_puzzles/main/puzzles.json"

# ===== –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–∏ =====
PTB_APP = None

# ===== –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–¥–∞—á =====
async def load_puzzles() -> list:
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(PUZZLES_URL) as resp:
                resp.raise_for_status()
                text = await resp.text()
                data = json.loads(text)
                if isinstance(data, list):
                    logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(data)} –∑–∞–¥–∞—á")
                    return data
                else:
                    logger.error("JSON –º–∞—î –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É.")
                    return []
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ puzzles.json: {e}")
        return []

# ===== –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –µ–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è MarkdownV2 =====
def escape_markdown_v2(text: str) -> str:
    """–ï–∫—Ä–∞–Ω—É—î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ –¥–ª—è Telegram MarkdownV2."""
    escape_chars = r"[_*\[\]()~`>#\+\-=|{}.!]"
    return re.sub(f'({escape_chars})', r'\\\1', text)

# ===== –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ =====
def get_keyboard(state: str = "start", puzzle_index: int = None):
    if state == "puzzle_sent":
        keyboard = [
            [InlineKeyboardButton("üí° –ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–æ–∑–≤'—è–∑–æ–∫", callback_data=f"sol_{puzzle_index}")],
            [InlineKeyboardButton("‚ôüÔ∏è –ù–æ–≤–∞ –∑–∞–¥–∞—á–∞", callback_data="new_puzzle")]
        ]
    else:
        keyboard = [
            [InlineKeyboardButton("‚ôüÔ∏è –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–¥–∞—á—É", callback_data="new_puzzle")]
        ]
    return InlineKeyboardMarkup(keyboard)

# ===== –ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ =====
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        escape_markdown_v2("–ü—Ä–∏–≤—ñ—Ç! –Ø —à–∞—Ö–æ–≤–∏–π –±–æ—Ç ü§ñ‚ôü\n–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–≤–æ—é –ø–µ—Ä—à—É –∑–∞–¥–∞—á—É:"),
        reply_markup=get_keyboard(state="start"),
        parse_mode='MarkdownV2'
    )

# ===== –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ =====
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    action = query.data
    puzzles_list = context.bot_data.get('puzzles', [])

    if action == "new_puzzle":
        if not puzzles_list:
            await query.edit_message_text(
                text=escape_markdown_v2("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–∞–¥–∞—á—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."),
                reply_markup=get_keyboard(state="start"),
                parse_mode='MarkdownV2'
            )
            return
        
        puzzle_index, puzzle = random.choice(list(enumerate(puzzles_list)))
        
        title = escape_markdown_v2(puzzle.get('title', '–ó–∞–¥–∞—á–∞'))
        url = escape_markdown_v2(puzzle.get('url', ''))
        msg = f"‚ôüÔ∏è *{title}*\n{url}"
        
        await query.edit_message_text(
            text=msg, 
            reply_markup=get_keyboard(state="puzzle_sent", puzzle_index=puzzle_index), 
            parse_mode='MarkdownV2'
        )

    elif action.startswith("sol_"):
        try:
            puzzle_index = int(action.split("_")[1])
            puzzle = puzzles_list[puzzle_index]
            
            title = escape_markdown_v2(puzzle.get('title', '–ó–∞–¥–∞—á–∞'))
            url = escape_markdown_v2(puzzle.get('url', ''))
            solution = escape_markdown_v2(puzzle.get('solution', '–†–æ–∑–≤\'—è–∑–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.'))
            msg = f"‚ôüÔ∏è *{title}*\n{url}\n\nüí° *–†–æ–∑–≤'—è–∑–æ–∫:* {solution}"
            await query.edit_message_text(
                text=msg, 
                reply_markup=get_keyboard(state="start"), 
                parse_mode='MarkdownV2'
            )
        except (IndexError, ValueError):
            await query.edit_message_text(
                text=escape_markdown_v2("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ü—é –∑–∞–¥–∞—á—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ—Ç—Ä–∏–º–∞–π—Ç–µ –Ω–æ–≤—É."),
                reply_markup=get_keyboard(state="start"),
                parse_mode='MarkdownV2'
            )

# =======================
# Webhook
# =======================
@app.route("/webhook", methods=["POST"])
async def webhook():
    if PTB_APP:
        try:
            update_data = request.get_json()
            update = Update.de_json(update_data, PTB_APP.bot)
            await PTB_APP.process_update(update)
            return '', 200
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {e}")
            return 'Error processing update', 500
    return 'Bot not initialized', 500

@app.route("/", methods=["GET"])
def index():
    return "–®–∞—Ö–æ–≤–∏–π –±–æ—Ç –ø—Ä–∞—Ü—é—î —á–µ—Ä–µ–∑ Webhook!", 200

# =======================
# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
# =======================
async def setup_bot():
    global PTB_APP
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!")
        return

    PTB_APP = Application.builder().token(BOT_TOKEN).build()
    
    puzzles_data = await load_puzzles()
    PTB_APP.bot_data['puzzles'] = puzzles_data
    
    await PTB_APP.initialize()
    
    PTB_APP.add_handler(CommandHandler("start", start_command))
    PTB_APP.add_handler(CallbackQueryHandler(button_handler))

    # –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—É –∑–º—ñ–Ω–Ω—É PUBLIC_URL –≤ –ø–µ—Ä—à—É —á–µ—Ä–≥—É
    webhook_url = os.getenv("PUBLIC_URL") or os.getenv("RENDER_EXTERNAL_URL") or os.getenv("RAILWAY_STATIC_URL")
    
    if webhook_url:
        full_webhook_url = f"{webhook_url}/webhook"
        logger.info(f"–í—Å—Ç–∞–Ω–æ–≤–ª—é—é –≤–µ–±—Ö—É–∫ –Ω–∞: {full_webhook_url}")
        try:
            await PTB_APP.bot.set_webhook(full_webhook_url, drop_pending_updates=True)
            logger.info(f"–í–µ–±—Ö—É–∫ —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {full_webhook_url}")
        except Exception as e:
            logger.error(f"–ù–ï –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≤–µ–±—Ö—É–∫: {e}")
    else:
        logger.warning("URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")

# =======================
# –ó–ê–ü–£–°–ö
# =======================
if __name__ == "__main__":
    asyncio.run(setup_bot())
    port = int(os.getenv("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
else:
    asyncio.run(setup_bot())

