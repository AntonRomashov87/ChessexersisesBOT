import os
import logging
import asyncio
import aiohttp
import random
import json

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from flask import Flask, request

# ===== –õ–æ–≥—É–≤–∞–Ω–Ω—è =====
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ===== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Flask =====
app = Flask(__name__)

# ===== –¢–æ–∫–µ–Ω —ñ Chat ID =====
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

# ===== URL JSON –∑ –∑–∞–¥–∞—á–∞–º–∏ =====
PUZZLES_URL = "https://raw.githubusercontent.com/AntonRomashov87/Chess_puzzles/main/puzzles.json"

# ===== –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ =====
PUZZLES = []
PTB_APP = None

# ===== –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–¥–∞—á =====
async def load_puzzles():
    global PUZZLES
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(PUZZLES_URL) as resp:
                resp.raise_for_status()
                text = await resp.text()
                data = json.loads(text)
                if isinstance(data, list):
                    PUZZLES = data
                    logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(PUZZLES)} –∑–∞–¥–∞—á")
                else:
                    logger.error("JSON –º–∞—î –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ puzzles.json: {e}")
        PUZZLES = []

# ===== –û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤—É –∑–∞–¥–∞—á—É =====
def get_random_puzzle():
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫ –∑ –¥–∞–Ω–∏–º–∏ –∑–∞–¥–∞—á—ñ –∞–±–æ None, —è–∫—â–æ –∑–∞–¥–∞—á –Ω–µ–º–∞—î."""
    if not PUZZLES:
        return None
    return random.choice(PUZZLES)

# ===== –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ (–û–ù–û–í–õ–ï–ù–û) =====
def get_keyboard(state: str = "start"):
    """–°—Ç–≤–æ—Ä—é—î –¥–∏–Ω–∞–º—ñ—á–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å—Ç–∞–Ω—É."""
    if state == "puzzle_sent":
        # –ö–Ω–æ–ø–∫–∏ –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á—ñ
        keyboard = [
            [InlineKeyboardButton("üí° –ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–æ–∑–≤'—è–∑–æ–∫", callback_data="show_solution")],
            [InlineKeyboardButton("‚ôüÔ∏è –ù–æ–≤–∞ –∑–∞–¥–∞—á–∞", callback_data="new_puzzle")]
        ]
    else:
        # –ü–æ—á–∞—Ç–∫–æ–≤–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∞–±–æ –ø—ñ—Å–ª—è —Ä–æ–∑–≤'—è–∑–∫—É
        keyboard = [
            [InlineKeyboardButton("‚ôüÔ∏è –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–¥–∞—á—É", callback_data="new_puzzle")]
        ]
    return InlineKeyboardMarkup(keyboard)

# ===== –ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ =====
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø —à–∞—Ö–æ–≤–∏–π –±–æ—Ç ü§ñ‚ôü\n"
        "–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–≤–æ—é –ø–µ—Ä—à—É –∑–∞–¥–∞—á—É:",
        reply_markup=get_keyboard(state="start")
    )

# ===== –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ (–ü–û–í–ù–Ü–°–¢–Æ –ü–ï–†–ï–ü–ò–°–ê–ù–û) =====
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    action = query.data

    if action == "new_puzzle":
        puzzle = get_random_puzzle()
        if not puzzle:
            await query.edit_message_text(
                text="‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–∞–¥–∞—á—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                reply_markup=get_keyboard(state="start")
            )
            return
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –∑–∞–¥–∞—á—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        context.user_data['current_puzzle'] = puzzle
        
        msg = f"‚ôüÔ∏è **{puzzle.get('title', '–ó–∞–¥–∞—á–∞')}**\n{puzzle.get('url', '')}"
        await query.edit_message_text(
            text=msg,
            reply_markup=get_keyboard(state="puzzle_sent"),
            parse_mode='Markdown' # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Markdown –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç—É
        )

    elif action == "show_solution":
        puzzle = context.user_data.get('current_puzzle')
        if not puzzle:
            await query.edit_message_text(
                text="–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–µ—Ä—à—É –æ—Ç—Ä–∏–º–∞–π—Ç–µ –∑–∞–¥–∞—á—É.",
                reply_markup=get_keyboard(state="start")
            )
            return

        solution = puzzle.get('solution', '–†–æ–∑–≤\'—è–∑–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.')
        msg = (
            f"‚ôüÔ∏è **{puzzle.get('title', '–ó–∞–¥–∞—á–∞')}**\n{puzzle.get('url', '')}\n\n"
            f"üí° **–†–æ–∑–≤'—è–∑–æ–∫:** {solution}"
        )
        await query.edit_message_text(
            text=msg,
            reply_markup=get_keyboard(state="start"),
            parse_mode='Markdown'
        )

# =======================
# Webhook
# =======================
@app.route("/webhook", methods=["POST"])
async def webhook():
    if PTB_APP:
        update_data = request.get_json()
        update = Update.de_json(update_data, PTB_APP.bot)
        await PTB_APP.process_update(update)
        return '', 200
    return 'Bot not initialized', 500

@app.route("/", methods=["GET"])
def index():
    return "–®–∞—Ö–æ–≤–∏–π –±–æ—Ç –ø—Ä–∞—Ü—é—î —á–µ—Ä–µ–∑ Webhook!", 200

# =======================
# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É
# =======================
async def setup_bot():
    global PTB_APP
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!")
        return

    await load_puzzles()
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ `persistence` –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è `user_data`
    from telegram.ext import PicklePersistence
    persistence = PicklePersistence(filepath="bot_data")
    
    PTB_APP = Application.builder().token(BOT_TOKEN).persistence(persistence).build()
    
    PTB_APP.add_handler(CommandHandler("start", start_command))
    PTB_APP.add_handler(CallbackQueryHandler(button_handler))

    webhook_url = os.getenv("RAILWAY_STATIC_URL") or os.getenv("RENDER_EXTERNAL_URL")
    if webhook_url:
        full_webhook_url = f"https://{webhook_url}/webhook"
        await PTB_APP.bot.set_webhook(full_webhook_url)
        logger.info(f"–í–µ–±—Ö—É–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {full_webhook_url}")
    else:
        logger.warning("URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è.")

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    if loop.is_running():
        loop.create_task(setup_bot())
    else:
        loop.run_until_complete(setup_bot())

    port = int(os.getenv("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

