import os
import logging
import asyncio
import aiohttp
import random
import json
from datetime import datetime, time

from telegram import Bot
from telegram.ext import Application, CommandHandler, ContextTypes
import nest_asyncio

# ===== –õ–æ–≥—É–≤–∞–Ω–Ω—è =====
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ===== –¢–æ–∫–µ–Ω —ñ Chat ID =====
BOT_TOKEN = "8092371216:AAF7bfwunLqI2ZrGBpE2goMaxXnol07vG0g"
CHAT_ID = "598331739"  # –∞–±–æ -1001234567890 –¥–ª—è –≥—Ä—É–ø–∏

# ===== URL JSON –∑ –∑–∞–¥–∞—á–∞–º–∏ =====
PUZZLES_URL = "https://raw.githubusercontent.com/AntonRomashov87/Chess_puzzles/main/puzzles.json"

# ===== –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á =====
PUZZLES = []

# ===== –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–¥–∞—á =====
async def load_puzzles():
    global PUZZLES
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(PUZZLES_URL) as resp:
                resp.raise_for_status()
                text = await resp.text()
                data = json.loads(text)
                if isinstance(data, list):
                    PUZZLES = data
                    logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(PUZZLES)} –∑–∞–¥–∞—á")
                else:
                    logger.error("JSON –º–∞—î –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ puzzles.json: {e}")
        PUZZLES = []

# ===== –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó –∑–∞–¥–∞—á—ñ =====
async def send_random_puzzle(bot: Bot):
    if not PUZZLES:
        logger.warning("–ó–∞–¥–∞—á—ñ —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ.")
        return
    puzzle = random.choice(PUZZLES)
    msg = f"‚ôüÔ∏è {puzzle.get('title', '–ó–∞–¥–∞—á–∞')}:\n{puzzle.get('url', '')}"
    try:
        await bot.send_message(chat_id=CHAT_ID, text=msg)
        logger.info("–ó–∞–¥–∞—á–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ ‚úÖ")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤ Telegram: {e}")

# ===== –ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ =====
async def start(update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø —à–∞—Ö–æ–≤–∏–π –±–æ—Ç ü§ñ‚ôü\n"
        "–ù–∞–ø–∏—à–∏ /puzzle, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤—É –∑–∞–¥–∞—á—É."
    )

async def puzzle_command(update, context: ContextTypes.DEFAULT_TYPE):
    await send_random_puzzle(context.bot)

# ===== –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ =====
async def scheduled_puzzles(bot: Bot):
    while True:
        now = datetime.now()
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –¥–≤—ñ—á—ñ –Ω–∞ –¥–µ–Ω—å: 08:00 —ñ 20:00
        if now.hour in [8, 20] and now.minute == 0:
            await send_random_puzzle(bot)
            await asyncio.sleep(61)  # —á–µ–∫–∞—î–º–æ 61 —Å–µ–∫—É–Ω–¥—É, —â–æ–± –Ω–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ
        await asyncio.sleep(20)

# ===== –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è =====
async def main():
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–∞–¥–∞—á—ñ
    await load_puzzles()

    # –°—Ç–≤–æ—Ä—é—î–º–æ Application (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –±–æ—Ç)
    app = Application.builder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("puzzle", puzzle_command))

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ–æ–Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏
    asyncio.create_task(scheduled_puzzles(app.bot))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π ‚úÖ")
    await app.run_polling()

# ===== –ó–∞–ø—É—Å–∫ =====
if __name__ == "__main__":
    # –î–æ–∑–≤–æ–ª—è—î –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ asyncio —É Render
    nest_asyncio.apply()
    asyncio.get_event_loop().run_until_complete(main())
